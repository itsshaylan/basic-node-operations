1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

RESULT OF SORT COMMANDS.JS:

done(data);
         if (err) throw err;
       break;
       break;
       case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       commandLibrary.echo(userInputArray.slice(1).join(" "));
      //we will add the functionality of echo next within the object commandLibrary
     case "echo":
     const fileName = fullPath[0];
     fs.readFile(fileName, (err, data) => {
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
     });
    "cat": function(fullPath) {
    done(userInput);
   "echo": function(userInput) {
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
   }
   }
  //parses the user input to understand which command was typed
 const commandLibrary = {
 function done(output) {
 function evaluateCmd(userInput) {
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 }
 };
//where we will store our commands
//where we will store the logic of our commands
//write out data
const fs = require("fs");
},

It has printed the lines of the file or concatenation of all files listed in its argument list in sorted order (alphabetically)

RESULT OF WC COMMANDS.JS

 42     113    1070 commands.js
meaning that there are 42 lines, 113 words, and 1070 characters in the file

RESULT OF UNIQ COMMANDS.JS

const fs = require("fs");

//write out data
 function done(output) {
     process.stdout.write(output);
     process.stdout.write('\nprompt > ');
 }

//where we will store our commands
 function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
   const userInputArray = userInput.split(" ");
   const command = userInputArray[0];

   switch (command) {
     case "echo":
      //we will add the functionality of echo next within the object commandLibrary
       commandLibrary.echo(userInputArray.slice(1).join(" "));
       break;
       case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       break;
   }
 }

//where we will store the logic of our commands
 const commandLibrary = {
   "echo": function(userInput) {
    done(userInput);
},
    "cat": function(fullPath) {
     const fileName = fullPath[0];
     fs.readFile(fileName, (err, data) => {
         if (err) throw err;
         done(data);
     });
   }
 };

 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;

this has deleted repeated lines in the file


2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.


I ran both sort | wc commands.js and wc | sort commands.js
Both times, only the 2nd command executed and I think that the reason that is the output is that it's running in sequential order meaning it's running the first operation and then the second but only outputting the last operation.

6. Reverse String

Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string. To improve your problem-solving experience, use the suggested functions to solve the problem.

Example
Input: "I'm learning to program algorithms!"
Output: "m'I gninrael ot margorp !smhtirogla"



function reverseString(inputString) {
console.log(inputString.split(" ").map((word)=>word.split('').reverse().join("")).join(" "));
}

reverseString("This should work!");